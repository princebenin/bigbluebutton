<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2017 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mate="http://mate.asfusion.com/"
				xmlns:common="org.bigbluebutton.common.*"
				styleName="fileExportWindow"
				creationComplete="creationCompleteHandler(event)"
				layout="absolute"
				resizeEffect="{windowResize}"
				width="500">

	<fx:Declarations>
		<mate:Dispatcher id="globalDispatch" />
		<mx:Resize id="windowResize" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flash.utils.ByteArray;
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.display.Display;
			import org.alivepdf.drawing.Caps;
			import org.alivepdf.fonts.CoreFont;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.layout.Layout;
			import org.alivepdf.layout.Mode;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Position;
			import org.alivepdf.layout.Resize;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.pages.Page;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
			import org.as3commons.lang.StringUtils;
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.modules.present.events.ExportEvent;
			import org.bigbluebutton.modules.present.model.PresentationModel;
			import org.bigbluebutton.modules.present.ui.views.models.SlideViewModel;
			import org.bigbluebutton.modules.whiteboard.models.Annotation;
			import org.bigbluebutton.modules.whiteboard.models.AnnotationType;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			public var firstPage:int;

			public var numberOfPages:int;

			public var slidesUrl:String;

			public var slideModel:SlideViewModel;
			
			public var presentationModel:PresentationModel;

			private var _pdf:PDF;

			private var _pdfByteArray:ByteArray;

			private var _currentPage:int = 1;

			private var fileName:String;

			private static const LOGGER:ILogger = getClassLogger(FileExportWindow);

			protected function creationCompleteHandler(event:FlexEvent):void {
				addEventListener("pdfComplete", pdfCompleteHandler);
				addEventListener("nextPdfPage", nextPdfPageHandler);
			}

			public function initConversion():void {
				fileName = presentationModel.getCurrentPresentation().name;
				fileName = StringUtils.substringBeforeLast(fileName, ".");
				
				closeButton.enabled = false;
				progressBar.visible = true;
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentationExport.generatingPDF');
				progressBar.setProgress(0, 100);
				progressBar.validateNow();

				setTimeout(startConversion, 750);
			}

			private function startConversion():void {
				_currentPage = firstPage;
				_pdf = new PDF(Orientation.LANDSCAPE, Unit.POINT);
				_pdf.setMargins(0, 0, 0, 0);
				_pdf.setDisplayMode(Display.FULL_PAGE, Layout.SINGLE_PAGE, Mode.NONE);
				dispatchEvent(new Event('nextPdfPage'));
			}

			protected function nextPdfPageHandler(event:Event):void {
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentationExport.converting', [presentationModel.getCurrentPresentation().name, _currentPage > numberOfPages ? 1 : _currentPage, numberOfPages]);
				progressBar.setProgress(_currentPage > numberOfPages ? 0 : _currentPage, _currentPage > numberOfPages ? 1 : numberOfPages);

				var pageLoader:Loader = new Loader();
				pageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function():void {
					var pagePath:String = presentationModel.getCurrentPresentation().id + "/" + _currentPage;
					LOGGER.debug(_currentPage + " - Page model path: " + pagePath);
					var annotations:Array = LiveMeeting.inst().whiteboardModel.getAnnotations(pagePath);

					// The mc type can be MovieClip or AMV1Movie
					var mc:* = (pageLoader.contentLoaderInfo.content);
					var page:Page = _pdf.addPage();
					_pdf.addImage(mc, new org.alivepdf.layout.Resize(Mode.RESIZE_PAGE, Position.CENTERED));

					// The ratio to calculate positions
					var ratio:Number = mc.width / slideModel.loaderW;
					LOGGER.debug(_currentPage + " - Processing " + annotations.length + " annotations ");
					for each (var annotation:Annotation in annotations) {
						LOGGER.debug(_currentPage + " - Processing annotation " + annotation.type);

						if (annotation.type == AnnotationType.TEXT) {
							var textX:Number = convertToLocal(annotation.annotation.x, slideModel.loaderW);
							var textY:Number = convertToLocal(annotation.annotation.y, slideModel.loaderH);
							var textFontSize:Number = convertToLocal(annotation.annotation.calcedFontSize, slideModel.loaderH);

							_pdf.setFont(new CoreFont(FontFamily.ARIAL), textFontSize * ratio);
							_pdf.textStyle(new RGBColor(annotation.annotation.fontColor));
							// FIXME: added annotation.annotation.fontSize for approximation
							_pdf.addText(annotation.annotation.text, textX * ratio, (textY + textFontSize) * ratio);
						} else if (annotation.type == AnnotationType.LINE) {
							var lineX:Number = convertToLocal(annotation.annotation.points[0], slideModel.loaderW);
							var lineY:Number = convertToLocal(annotation.annotation.points[1], slideModel.loaderH);
							var lineX2:Number = convertToLocal(annotation.annotation.points[2], slideModel.loaderW);
							var lineY2:Number = convertToLocal(annotation.annotation.points[3], slideModel.loaderH);
							var lineThickness:Number = convertToLocal(annotation.annotation.thickness, slideModel.loaderW);

							_pdf.lineStyle(new RGBColor(annotation.annotation.color), lineThickness * ratio, 0, 1, "NonZeroWinding", "Normal", null, Caps.ROUND);
							_pdf.drawLine(lineX * ratio, lineY * ratio, lineX2 * ratio, lineY2 * ratio);
						} else if (annotation.type == AnnotationType.RECTANGLE) {
							var rectX:Number = convertToLocal(annotation.annotation.points[0], slideModel.loaderW);
							var rectY:Number = convertToLocal(annotation.annotation.points[1], slideModel.loaderH);
							var rectWidth:Number = convertToLocal(annotation.annotation.points[2], slideModel.loaderW) - rectX;
							var rectHeight:Number = convertToLocal(annotation.annotation.points[3], slideModel.loaderH) - rectY;
							var recThickness:Number = convertToLocal(annotation.annotation.thickness, slideModel.loaderW);

							_pdf.lineStyle(new RGBColor(annotation.annotation.color), recThickness * ratio, 0, 1, "NonZeroWinding", "Normal", null, Caps.ROUND);
							_pdf.drawRect(new Rectangle(rectX * ratio, rectY * ratio, rectWidth * ratio, rectHeight * ratio));
						} else if (annotation.type == AnnotationType.TRIANGLE) {
							var startX:Number = convertToLocal(annotation.annotation.points[0], slideModel.loaderW);
							var startY:Number = convertToLocal(annotation.annotation.points[1], slideModel.loaderH);
							var triangleWidth:Number = convertToLocal(annotation.annotation.points[2], slideModel.loaderW) - startX;
							var triangleHeight:Number = convertToLocal(annotation.annotation.points[3], slideModel.loaderH) - startY;
							var triangleThickness:Number = convertToLocal(annotation.annotation.thickness, slideModel.loaderW);

							_pdf.lineStyle(new RGBColor(annotation.annotation.color), triangleThickness * ratio, 0, 1, "NonZeroWinding", "Normal", null, Caps.ROUND);

							_pdf.drawLine((startX + triangleWidth / 2) * ratio, startY * ratio, (startX + triangleWidth) * ratio, (startY + triangleHeight) * ratio);
							_pdf.drawLine((startX + triangleWidth) * ratio, (startY + triangleHeight) * ratio, startX * ratio, (triangleHeight + startY) * ratio);
							_pdf.drawLine(startX * ratio, (triangleHeight + startY) * ratio, (startX + triangleWidth / 2) * ratio, startY * ratio);
						} else if (annotation.type == AnnotationType.ELLIPSE) {
							var ellipseX:Number = convertToLocal(parseFloat(annotation.annotation.points[0]), slideModel.loaderW);
							var ellipseY:Number = convertToLocal(parseFloat(annotation.annotation.points[1]), slideModel.loaderH);
							var ellipseWidth:Number = convertToLocal(parseFloat(annotation.annotation.points[2]), slideModel.loaderW) - ellipseX;
							var ellipseHeight:Number = convertToLocal(parseFloat(annotation.annotation.points[3]), slideModel.loaderH) - ellipseY;
							var ellipseThickness:Number = convertToLocal(annotation.annotation.thickness, slideModel.loaderW);

							_pdf.lineStyle(new RGBColor(annotation.annotation.color), ellipseThickness * ratio, 0, 1, "NonZeroWinding", "Normal", null, Caps.ROUND);
							_pdf.drawEllipse((ellipseX * ratio) + (ellipseWidth / 2) * ratio, (ellipseY * ratio) + (ellipseHeight / 2) * ratio, (ellipseWidth * ratio) / 2, (ellipseHeight * ratio) / 2);
						} else if (annotation.type == AnnotationType.PENCIL) {
							LOGGER.debug(_currentPage + " - Drawin a new pencil - Points count = " + annotation.annotation.points.length);
							var pencilThickness:Number = convertToLocal(annotation.annotation.thickness, slideModel.loaderW);

							_pdf.lineStyle(new RGBColor(annotation.annotation.color), pencilThickness * ratio, 0, 1, "NonZeroWinding", "Normal", null, Caps.ROUND);
							var pointsArray:Array = annotation.annotation.points as Array;
							var convertedPointsArray:Array = new Array();

							for (var i:int = 0; i < pointsArray.length; i += 2) {
								var x:Number = convertToLocal(pointsArray[i], slideModel.loaderW);
								var y:Number = convertToLocal(pointsArray[i + 1], slideModel.loaderH);

								if (i == 0)
									_pdf.moveTo(x * ratio, y * ratio);
								else
									_pdf.lineTo(x * ratio, y * ratio);
							}

							_pdf.end(false);
						}
					}

					LOGGER.debug(_currentPage + " - " + "Next page");
					_currentPage++;
					if (_currentPage <= numberOfPages) {
						dispatchEvent(new Event('nextPdfPage'));
					} else {
						dispatchEvent(new Event('pdfComplete'));
					}
				});
				var url:URLRequest = new URLRequest(slidesUrl + _currentPage);
				pageLoader.load(url);
			}

			protected function pdfCompleteHandler(event:Event):void {
				progressBar.setProgress(100, 100);
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentationExport.conversionComplete');
				setTimeout(downloadReady, 500);
			}

			private function downloadReady():void {
				closeButton.enabled = saveBtn.enabled = true;
				closeButton.visible = closeButton.includeInLayout = true;
				saveBtn.visible = saveBtn.includeInLayout = true;
				progressBar.visible = progressBar.includeInLayout = false;
			}

			protected function saveButtonClickHandler(event:MouseEvent):void {
				_pdfByteArray = _pdf.save(Method.LOCAL);
				var file:FileReference = new FileReference();
				file.addEventListener(Event.COMPLETE, function(evt:Event):void {
					globalDispatch.dispatchEvent(new ExportEvent(ExportEvent.CLOSE_EXPORT_WINDOW));
				});
				file.addEventListener(Event.DEACTIVATE, function(evt:Event):void {
					saveResultText.visible = saveResultText.includeInLayout = false;
					saveResultText.text = "";
				});
				file.addEventListener(IOErrorEvent.IO_ERROR, function(evt:Event):void {
					saveResultText.visible = saveResultText.includeInLayout = true;
					saveResultText.text = ResourceUtil.getInstance().getString('bbb.presentationExport.ioerror');
					saveResultText.styleName = "fileExportResultError";
				});
				file.save(_pdfByteArray, fileName + ".pdf");
			}

			protected function closeButtonClickHandler(event:MouseEvent):void {
				close();
			}

			private function close():void {
				_pdf = null;
				_pdfByteArray = null;
				globalDispatch.dispatchEvent(new ExportEvent(ExportEvent.CLOSE_EXPORT_WINDOW));
			}

			private function convertToLocal(value:Number, factor:Number):Number {
				return (value * factor) / 100.0;
			}
		]]>
	</fx:Script>

	<mx:VBox width="100%"
			 height="100%"
			 paddingBottom="20"
			 paddingTop="15"
			 verticalGap="20"
			 horizontalAlign="center">

		<common:AdvancedLabel text="{ResourceUtil.getInstance().getString('bbb.presentationExport.title')}"
							  styleName="titleWindowStyle"
							  width="100%" />

		<mx:ProgressBar id="progressBar"
						mode="manual"
						styleName="fileExportUploadProgressBar"
						labelPlacement="top"
						width="100%"
						visible="false" />

		<mx:Button id="saveBtn"
				   styleName="mainActionButton"
				   visible="false"
				   includeInLayout="false"
				   label="{ResourceUtil.getInstance().getString('bbb.presentationExport.saveToDisk')}"
				   enabled="false"
				   click="saveButtonClickHandler(event)" />

		<mx:Text id="saveResultText"
				 width="100%"
				 visible="false"
				 includeInLayout="false"
				 textAlign="center" />
	</mx:VBox>

	<mx:Button id="closeButton"
			   click="closeButtonClickHandler(event)"
			   styleName="titleWindowCloseButton"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.presentationExport.close')}"
			   right="10"
			   top="15"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.presentationExport.close.toolTip')}" />

</mx:TitleWindow>
